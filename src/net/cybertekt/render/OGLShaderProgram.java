package net.cybertekt.render;

import java.nio.FloatBuffer;
import net.cybertekt.asset.shader.OGLShader;
import net.cybertekt.exception.OGLException;
import org.joml.Matrix4f;
import org.lwjgl.opengl.GL20;
import static org.lwjgl.opengl.GL20.GL_COMPILE_STATUS;
import static org.lwjgl.opengl.GL20.GL_LINK_STATUS;
import static org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS;
import static org.lwjgl.opengl.GL20.glAttachShader;
import static org.lwjgl.opengl.GL20.glCreateProgram;
import static org.lwjgl.opengl.GL20.glDeleteProgram;
import static org.lwjgl.opengl.GL20.glDetachShader;
import static org.lwjgl.opengl.GL20.glGetProgrami;
import static org.lwjgl.opengl.GL20.glGetShaderi;
import static org.lwjgl.opengl.GL20.glGetUniformLocation;
import static org.lwjgl.opengl.GL20.glLinkProgram;
import static org.lwjgl.opengl.GL20.glUniformMatrix4fv;
import static org.lwjgl.opengl.GL20.glUseProgram;
import static org.lwjgl.opengl.GL20.glValidateProgram;
import org.lwjgl.system.MemoryStack;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * OGL Shader - (C) Cybertekt Software
 *
 * Represents an OpenGL shader program that consist of at least one
 * {@link OGLShader GLSL shaders}.
 *
 * @author Andrew Vektor
 * @version 1.0.0
 * @since 1.0.0
 */
public class OGLShaderProgram {

    /**
     * Static {@link org.slf4j.Logger logger} for class debugging.
     */
    public static final Logger LOG = LoggerFactory.getLogger(OGLShaderProgram.class);

    /**
     * The OpenGL shader program identifier. The value of this constant is
     * generated by OpenGL via glCreateProgram.
     */
    private final int ID;

    /**
     * Human readable identifier for this shader program.
     */
    private final String NAME;

    /**
     *
     * @param name the String that identifiers the shader program.
     * @param shaders the {@link OGLShader OGL shaders} to include in this
     * shader program.
     * @throws OGLException
     */
    public OGLShaderProgram(final String name, final OGLShader... shaders) throws OGLException {
        this.ID = glCreateProgram();
        this.NAME = name;

        /* Create GLSL Shader Program */
        if (ID == 0) {
            throw new OGLException("Unable to create additional shaders.");
        }

        /* Compile and Attach Shaders */
        for (final OGLShader s : shaders) {

            /* Check Shader Compilation Status */
            if (glGetShaderi(s.getId(), GL_COMPILE_STATUS) == 0) {
                s.compile();
            }
            glAttachShader(ID, s.getId());
        }

        /* Link Shader Program */
        glLinkProgram(ID);
        if (glGetProgrami(ID, GL_LINK_STATUS) == 0) {
            throw new OGLException("Unable to link shaders: " + GL20.glGetProgramInfoLog(ID));
        }

        /* Detach Shaders To Free Them For Future Use */
        for (final OGLShader s : shaders) {
            glDetachShader(ID, s.getId());
            s.delete();
        }
    }

    /**
     * Validates the shader program. Shader program validation requires
     * significant processing time and should only be used for the purpose of
     * debugging. Validation is not required for a shader program to function
     * properly.
     */
    public final void validate() {
        glValidateProgram(ID);
        if (glGetProgrami(ID, GL_VALIDATE_STATUS) == 0) {
            LOG.error("{} Shader Validation Failed: {}", NAME, GL20.glGetProgramInfoLog(ID));
        } else {
            LOG.info("{} Shader Validation Successful  ", NAME);
        }
    }

    public final void destroy() {
        if (ID != 0) {
            glDeleteProgram(ID);
        }
    }

    public final void setUniform(final String name, final Matrix4f value) {
        int loc = glGetUniformLocation(ID, name);
        if (loc < 0) {
            throw new RuntimeException("Uniform Not Found: " + name);
        } else {
            try (MemoryStack stack = MemoryStack.stackPush()) {
                FloatBuffer fb = stack.mallocFloat(16);
                value.get(fb);
                glUniformMatrix4fv(loc, false, fb);
            }
        }
    }

    /**
     * Returns the identifier assigned to this shader program by OpenGL during
     * construction.
     *
     * @return the identifier assigned to this shader program by OpenGL.
     */
    public final int getId() {
        return ID;
    }

    /**
     * Returns the name of this shader program as defined during construction.
     *
     * @return the name assigned to this shader program during construction.
     */
    public final String getName() {
        return NAME;
    }

}
